{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/evil/Documents/lilguy/src/components/LilGuy/SpriteManager.ts"],"sourcesContent":["// Sprite Manager for LilGuy Character\nimport { LilGuyStage, LilGuyColor, LilGuyAnimation } from './LilGuy';\n\n// Define specific animation types for each stage\ntype EggAnimation = 'idle' | 'shake' | 'hatch';\ntype HatchlingAnimation = 'idle' | 'walk' | 'happy' | 'sad';\ntype FullAnimation = 'idle' | 'walk' | 'happy' | 'angry' | 'sad' | 'shocked';\n\n// Sprite dimensions\nexport const spriteDimensions = {\n  width: 500,  // Match actual sprite size\n  height: 500, // Match actual sprite size\n  columns: 1,  // Each sprite is a separate image\n};\n\n// Frame counts for each animation type\nconst animationFrames: Record<string, number> = {\n  idle: 5,\n  walk: 4,\n  happy: 5,\n  angry: 4,\n  sad: 6,\n  sleepy: 6, // Used for shocked animation\n  move: 6,   // Used for shake animation\n  hatch: 6   // Hatch animation\n};\n\n// Get the current frame index for an animation\nexport const getAnimationFrameIndex = (animation: LilGuyAnimation, frameCount: number): number => {\n  const animKey = getAnimationKey(animation);\n  const frameMax = animationFrames[animKey] || 1;\n  \n  // Calculate frame based on frame count\n  return Math.floor(frameCount / 10) % frameMax;\n};\n\n// Map animation types to their corresponding file name parts\nconst getAnimationKey = (animation: LilGuyAnimation): string => {\n  switch (animation) {\n    case 'shocked': return 'sleepy'; // Using sleepy for shocked since we don't have shocked\n    case 'shake': return 'move';     // Using move for shake animation\n    default: return animation;\n  }\n};\n\n// Get sprite sheet path based on stage, color, and animation\nexport const getSpriteSheetPath = (stage: LilGuyStage, color: LilGuyColor, animation: LilGuyAnimation, frameIndex?: number): string => {\n  // Get the appropriate animation key\n  const animKey = getAnimationKey(animation);\n  \n  // Use the provided frame index or default to 0\n  const frame = frameIndex !== undefined ? frameIndex : 0;\n  \n  // Format the animation name with frame index\n  const animName = `${animKey}_${frame}`;\n  \n  // Build the path based on the file naming pattern\n  const basePath = `/assets/sprites/${color}/`;\n  \n  if (stage === 'egg') {\n    return `${basePath}lilguy_egg_${color}_${animName}.png`;\n  } else if (stage === 'hatchling') {\n    // Since we don't have dedicated hatchling sprites, use egg sprites\n    return `${basePath}lilguy_egg_${color}_${animName}.png`;\n  } else if (stage === 'angel') {\n    // For green, the naming pattern is different\n    if (color === 'green') {\n      return `${basePath}lilguy_angel_${color}_${animName}.png`;\n    }\n    // For other colors\n    return `${basePath}lilguy_angel_${animName}.png`;\n  } else if (stage === 'devil') {\n    // For green, the naming pattern is different\n    if (color === 'green') {\n      return `${basePath}lilguy_devil_${color}_${animName}.png`;\n    }\n    // For other colors\n    return `${basePath}lilguy_devil_${animName}.png`;\n  } else {\n    // Normal lilguy\n    // For green, the naming pattern includes 'main'\n    if (color === 'green') {\n      return `${basePath}lilguy_main_${color}_${animName}.png`;\n    }\n    // For other colors - just use lilguy_ prefix\n    return `${basePath}lilguy_${animName}.png`;\n  }\n};\n\n// Get animation frames for a specific stage and animation type\nexport const getAnimationFrames = (stage: LilGuyStage, animation: LilGuyAnimation) => {\n  // Get the animation key (e.g., 'idle', 'walk', etc.)\n  const animKey = getAnimationKey(animation);\n  \n  // Get the number of frames for this animation\n  const frameCount = animationFrames[animKey] || 1;\n  \n  // Create an array of frames\n  const frames = Array.from({ length: frameCount }, (_, i) => ({ x: 0, y: 0, frameIndex: i }));\n  \n  // Return the animation data\n  return {\n    frames,\n    frameRate: getFrameRate(animation),\n    frameCount\n  };\n};\n\n// Get the frame rate for different animations\nconst getFrameRate = (animation: LilGuyAnimation): number => {\n  switch (animation) {\n    case 'walk': return 10;\n    case 'happy': return 12;\n    case 'sad': return 8;\n    case 'angry': return 10;\n    case 'shocked': return 12;\n    case 'shake': return 12;\n    case 'hatch': return 6;\n    default: return 8; // Default for idle\n  }\n};\n"],"names":[],"mappings":"AAAA,sCAAsC;;;;;;;AAS/B,MAAM,mBAAmB;IAC9B,OAAO;IACP,QAAQ;IACR,SAAS;AACX;AAEA,uCAAuC;AACvC,MAAM,kBAA0C;IAC9C,MAAM;IACN,MAAM;IACN,OAAO;IACP,OAAO;IACP,KAAK;IACL,QAAQ;IACR,MAAM;IACN,OAAO,EAAI,kBAAkB;AAC/B;AAGO,MAAM,yBAAyB,CAAC,WAA4B;IACjE,MAAM,UAAU,gBAAgB;IAChC,MAAM,WAAW,eAAe,CAAC,QAAQ,IAAI;IAE7C,uCAAuC;IACvC,OAAO,KAAK,KAAK,CAAC,aAAa,MAAM;AACvC;AAEA,6DAA6D;AAC7D,MAAM,kBAAkB,CAAC;IACvB,OAAQ;QACN,KAAK;YAAW,OAAO,UAAU,uDAAuD;QACxF,KAAK;YAAS,OAAO,QAAY,iCAAiC;QAClE;YAAS,OAAO;IAClB;AACF;AAGO,MAAM,qBAAqB,CAAC,OAAoB,OAAoB,WAA4B;IACrG,oCAAoC;IACpC,MAAM,UAAU,gBAAgB;IAEhC,+CAA+C;IAC/C,MAAM,QAAQ,eAAe,YAAY,aAAa;IAEtD,6CAA6C;IAC7C,MAAM,WAAW,GAAG,QAAQ,CAAC,EAAE,OAAO;IAEtC,kDAAkD;IAClD,MAAM,WAAW,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;IAE5C,IAAI,UAAU,OAAO;QACnB,OAAO,GAAG,SAAS,WAAW,EAAE,MAAM,CAAC,EAAE,SAAS,IAAI,CAAC;IACzD,OAAO,IAAI,UAAU,aAAa;QAChC,mEAAmE;QACnE,OAAO,GAAG,SAAS,WAAW,EAAE,MAAM,CAAC,EAAE,SAAS,IAAI,CAAC;IACzD,OAAO,IAAI,UAAU,SAAS;QAC5B,6CAA6C;QAC7C,IAAI,UAAU,SAAS;YACrB,OAAO,GAAG,SAAS,aAAa,EAAE,MAAM,CAAC,EAAE,SAAS,IAAI,CAAC;QAC3D;QACA,mBAAmB;QACnB,OAAO,GAAG,SAAS,aAAa,EAAE,SAAS,IAAI,CAAC;IAClD,OAAO,IAAI,UAAU,SAAS;QAC5B,6CAA6C;QAC7C,IAAI,UAAU,SAAS;YACrB,OAAO,GAAG,SAAS,aAAa,EAAE,MAAM,CAAC,EAAE,SAAS,IAAI,CAAC;QAC3D;QACA,mBAAmB;QACnB,OAAO,GAAG,SAAS,aAAa,EAAE,SAAS,IAAI,CAAC;IAClD,OAAO;QACL,gBAAgB;QAChB,gDAAgD;QAChD,IAAI,UAAU,SAAS;YACrB,OAAO,GAAG,SAAS,YAAY,EAAE,MAAM,CAAC,EAAE,SAAS,IAAI,CAAC;QAC1D;QACA,6CAA6C;QAC7C,OAAO,GAAG,SAAS,OAAO,EAAE,SAAS,IAAI,CAAC;IAC5C;AACF;AAGO,MAAM,qBAAqB,CAAC,OAAoB;IACrD,qDAAqD;IACrD,MAAM,UAAU,gBAAgB;IAEhC,8CAA8C;IAC9C,MAAM,aAAa,eAAe,CAAC,QAAQ,IAAI;IAE/C,4BAA4B;IAC5B,MAAM,SAAS,MAAM,IAAI,CAAC;QAAE,QAAQ;IAAW,GAAG,CAAC,GAAG,IAAM,CAAC;YAAE,GAAG;YAAG,GAAG;YAAG,YAAY;QAAE,CAAC;IAE1F,4BAA4B;IAC5B,OAAO;QACL;QACA,WAAW,aAAa;QACxB;IACF;AACF;AAEA,8CAA8C;AAC9C,MAAM,eAAe,CAAC;IACpB,OAAQ;QACN,KAAK;YAAQ,OAAO;QACpB,KAAK;YAAS,OAAO;QACrB,KAAK;YAAO,OAAO;QACnB,KAAK;YAAS,OAAO;QACrB,KAAK;YAAW,OAAO;QACvB,KAAK;YAAS,OAAO;QACrB,KAAK;YAAS,OAAO;QACrB;YAAS,OAAO,GAAG,mBAAmB;IACxC;AACF","debugId":null}}]
}