{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/evil/Documents/lilguy/src/components/LilGuy/SpriteManager.ts"],"sourcesContent":["// Sprite Manager for LilGuy Character\nimport { LilGuyStage, LilGuyColor, LilGuyAnimation } from './LilGuy';\n\n// Define specific animation types for each stage\ntype EggAnimation = 'idle' | 'shake' | 'hatch';\ntype HatchlingAnimation = 'idle' | 'walk' | 'happy' | 'sad';\ntype FullAnimation = 'idle' | 'walk' | 'happy' | 'angry' | 'sad' | 'shocked';\n\n// Sprite dimensions\nexport const spriteDimensions = {\n  width: 500,  // Match actual sprite size\n  height: 500, // Match actual sprite size\n  columns: 1,  // Each sprite is a separate image\n};\n\n// Frame counts for each animation type\nconst animationFrames: Record<string, number> = {\n  idle: 5,\n  walk: 4,\n  happy: 5,\n  angry: 4,\n  sad: 6,\n  sleepy: 6, // Used for shocked animation\n  move: 6,   // Used for shake animation\n  hatch: 6   // Hatch animation\n};\n\n// Get the current frame index for an animation\nexport const getAnimationFrameIndex = (animation: LilGuyAnimation, frameCount: number): number => {\n  const animKey = getAnimationKey(animation);\n  const frameMax = animationFrames[animKey] || 1;\n  \n  // Calculate frame based on frame count\n  return Math.floor(frameCount / 10) % frameMax;\n};\n\n// Map animation types to their corresponding file name parts\nconst getAnimationKey = (animation: LilGuyAnimation): string => {\n  switch (animation) {\n    case 'shocked': return 'sleepy'; // Using sleepy for shocked since we don't have shocked\n    case 'shake': return 'move';     // Using move for shake animation\n    default: return animation;\n  }\n};\n\n// Get sprite sheet path based on stage, color, and animation\nexport const getSpriteSheetPath = (stage: LilGuyStage, color: LilGuyColor, animation: LilGuyAnimation, frameIndex?: number): string => {\n  // Get the appropriate animation key\n  const animKey = getAnimationKey(animation);\n  \n  // Use the provided frame index or default to 0\n  const frame = frameIndex !== undefined ? frameIndex : 0;\n  \n  // Format the animation name with frame index\n  const animName = `${animKey}_${frame}`;\n  \n  // Build the path based on the file naming pattern\n  const basePath = `/assets/sprites/${color}/`;\n  \n  if (stage === 'egg') {\n    return `${basePath}lilguy_egg_${color}_${animName}.png`;\n  } else if (stage === 'hatchling') {\n    // Since we don't have dedicated hatchling sprites, use egg sprites\n    return `${basePath}lilguy_egg_${color}_${animName}.png`;\n  } else if (stage === 'angel') {\n    // For green, the naming pattern is different\n    if (color === 'green') {\n      return `${basePath}lilguy_angel_${color}_${animName}.png`;\n    }\n    // For other colors\n    return `${basePath}lilguy_angel_${animName}.png`;\n  } else if (stage === 'devil') {\n    // For green, the naming pattern is different\n    if (color === 'green') {\n      return `${basePath}lilguy_devil_${color}_${animName}.png`;\n    }\n    // For other colors\n    return `${basePath}lilguy_devil_${animName}.png`;\n  } else {\n    // Normal lilguy\n    // For green, the naming pattern includes 'main'\n    if (color === 'green') {\n      return `${basePath}lilguy_main_${color}_${animName}.png`;\n    }\n    // For other colors - just use lilguy_ prefix\n    return `${basePath}lilguy_${animName}.png`;\n  }\n};\n\n// Get animation frames for a specific stage and animation type\nexport const getAnimationFrames = (stage: LilGuyStage, animation: LilGuyAnimation) => {\n  // Get the animation key (e.g., 'idle', 'walk', etc.)\n  const animKey = getAnimationKey(animation);\n  \n  // Get the number of frames for this animation\n  const frameCount = animationFrames[animKey] || 1;\n  \n  // Create an array of frames\n  const frames = Array.from({ length: frameCount }, (_, i) => ({ x: 0, y: 0, frameIndex: i }));\n  \n  // Return the animation data\n  return {\n    frames,\n    frameRate: getFrameRate(animation),\n    frameCount\n  };\n};\n\n// Get the frame rate for different animations\nconst getFrameRate = (animation: LilGuyAnimation): number => {\n  switch (animation) {\n    case 'walk': return 10;\n    case 'happy': return 12;\n    case 'sad': return 8;\n    case 'angry': return 10;\n    case 'shocked': return 12;\n    case 'shake': return 12;\n    case 'hatch': return 6;\n    default: return 8; // Default for idle\n  }\n};\n\n// --- Palette Swap Utility for LilGuy Recoloring ---\n// Palette values matched to user screenshots\nconst LILGUY_COLOR_PALETTES: Record<string, number[][]> = {\n  black:   [\n    [30, 30, 30],   // darkest\n    [60, 60, 60],\n    [100, 100, 100],\n    [160, 160, 160],\n    [220, 220, 220], // lightest\n  ],\n  blue:    [\n    [25, 80, 170],   // dark blue outline (from reference)\n    [33, 118, 217],  // main blue (from reference #2176D9)\n    [87, 156, 255],  // mid highlight\n    [120, 180, 255], // outline highlight (lighter blue)\n    [255, 255, 255], // white\n  ],\n  green:   [\n    [20, 100, 30],   // dark green outline (from reference)\n    [54, 210, 58],   // main green (from reference #36D23A)\n    [120, 240, 120], // mid highlight\n    [180, 255, 180], // outline highlight (lighter green)\n    [255, 255, 255], // white\n  ],\n  pink:    [\n    [100, 30, 70],\n    [220, 80, 180],\n    [240, 140, 200],\n    [255, 200, 220],\n    [255, 220, 240],\n  ]\n};\n\n// Improved: More robust outline/contour detection for colored versions\nfunction isBodyPixel(r: number, g: number, b: number): boolean {\n  // Allow a bit more color drift for outlines (tolerate up to 40 difference)\n  const maxDiff = 40;\n  return Math.abs(r - g) < maxDiff && Math.abs(r - b) < maxDiff && Math.abs(g - b) < maxDiff;\n}\n\nexport function recolorSpriteImage(\n  img: HTMLImageElement,\n  targetColor: 'black' | 'blue' | 'green' | 'pink',\n  callback: (recoloredImg: HTMLImageElement) => void\n): void {\n  console.log('[LilGuy] recolorSpriteImage called for color:', targetColor);\n  const palette = LILGUY_COLOR_PALETTES[targetColor] || LILGUY_COLOR_PALETTES.black;\n  const mainColor = palette[1];\n  const outlineColor = palette[3];\n  const darkOutline = palette[0];\n  const highlightColor = palette[4];\n  const offCanvas = document.createElement('canvas');\n  offCanvas.width = img.width;\n  offCanvas.height = img.height;\n  const ctx = offCanvas.getContext('2d');\n  if (!ctx) {\n    console.error('[LilGuy] Failed to get 2D context');\n    return;\n  }\n  ctx.drawImage(img, 0, 0);\n  const imageData = ctx.getImageData(0, 0, img.width, img.height);\n  const data = imageData.data;\n  let recoloredCount = 0;\n  for (let i = 0; i < data.length; i += 4) {\n    if (data[i+3] === 0) continue; // transparent\n    const r = data[i], g = data[i+1], b = data[i+2];\n    // If pixel is nearly white, use highlight\n    if (r > 220 && g > 220 && b > 220) {\n      data[i] = highlightColor[0];\n      data[i+1] = highlightColor[1];\n      data[i+2] = highlightColor[2];\n      data[i+3] = 255;\n      recoloredCount++;\n      continue;\n    }\n    // Only recolor neutral/gray pixels (body/outline), preserve colored emotion details\n    const maxDiff = 24;\n    if (Math.abs(r-g) < maxDiff && Math.abs(r-b) < maxDiff && Math.abs(g-b) < maxDiff) {\n      const brightness = 0.299 * r + 0.587 * g + 0.114 * b;\n      if (brightness < 20) {\n        data[i] = darkOutline[0];\n        data[i+1] = darkOutline[1];\n        data[i+2] = darkOutline[2];\n        data[i+3] = 255;\n        recoloredCount++;\n      } else if (brightness < 80) {\n        data[i] = outlineColor[0];\n        data[i+1] = outlineColor[1];\n        data[i+2] = outlineColor[2];\n        data[i+3] = 255;\n        recoloredCount++;\n      } else {\n        data[i] = mainColor[0];\n        data[i+1] = mainColor[1];\n        data[i+2] = mainColor[2];\n        data[i+3] = 255;\n        recoloredCount++;\n      }\n    }\n    // else: colored pixel (emotion/expressive detail), preserve as-is\n    if (i % 4000 === 0) {\n      console.log(`[LilGuy] Recoloring pixel ${i/4}: rgb(${r},${g},${b}) -> rgb(${data[i]},${data[i+1]},${data[i+2]})`);\n    }\n  }\n  console.log(`[LilGuy] Total recolored pixels: ${recoloredCount} / ${data.length / 4}`);\n  ctx.putImageData(imageData, 0, 0);\n  const recoloredImg = new window.Image();\n  recoloredImg.onload = () => {\n    console.log('[LilGuy] Recolored image loaded and callback called');\n    callback(recoloredImg);\n  };\n  recoloredImg.src = offCanvas.toDataURL();\n}\n// --- END Palette Swap Utility ---\n"],"names":[],"mappings":"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","debugId":null}}]
}